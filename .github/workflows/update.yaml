name: "Update"
on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:
jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: cachix/install-nix-action@v22
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/nix
          key: nix-cache-${{ hashFiles('flake.lock') }}
          restore-keys: |
            nix-cache-
      - uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          source-revision: 7d993eaabcbbdc1ef26aec52133ee19ef8ac29a9
          diagnostic-endpoint: ""
      - name: Configure git user
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      - name: Update flake
        run: |
          nix flake update --debug --commit-lock-file
          git push
      # From: https://github.com/actions/toolkit/issues/505#issuecomment-1449729064
      # This doesn't quite seem to work. I assumed it would cause the cache to
      # be written to a new key if flake.lock was updated, but it still seems
      # to use the old key.
      - name: Update cache key
        run: |
          STATE_CACHE_KEY="nix-cache-${{ hashFiles('flake.lock') }}"
          echo "STATE_CACHE_KEY=${STATE_CACHE_KEY}" >> $GITHUB_ENV
